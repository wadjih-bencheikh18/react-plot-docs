"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[5950],{1722:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>C,contentTitle:()=>y,default:()=>P,frontMatter:()=>v,metadata:()=>g,toc:()=>j});var a=n(7462),o=n(7294),r=n(3905),i=n(2854),l=n(8154),s=n(5802),c=n(814),m=n(1119);function d(){const[e,t]=(0,o.useState)([]),n=(0,l.AO)({direction:"horizontal"});return(0,o.useEffect)((()=>{fetch("/data/nmr-1h.jdx").then((e=>{e.text().then((e=>{const n=(0,s.O)(e).flatten[0].spectra[0].data,a=(0,i.G0)(n);t(a)}))}))}),[]),o.createElement("div",null,o.createElement(l.XN,{width:800,height:300},o.createElement(l.eh,{data:e,xAxis:"x",yAxis:"y"}),o.createElement(l.RD,{id:"x",position:"bottom",label:"Chemical shift (\ud835\udec5)",displayPrimaryGridLines:!0,flip:!0}),o.createElement(l.RD,{position:"left",hidden:!0,paddingStart:.03}),o.createElement(l.uN,null,n.annotations)))}const p="import React from 'react';\nimport { xyToXYObject } from 'ml-spectra-processing';\nimport { useEffect, useState } from 'react';\nimport {\n  Annotations,\n  Axis,\n  LineSeries,\n  Plot,\n  PlotController,\n  SeriesPoint,\n  useAxisZoom,\n} from 'react-plot';\nimport { convert as convertJcamp } from 'jcampconverter';\n\nfunction ZoomablePlot() {\n  const [data, setData] = useState<SeriesPoint[]>([]);\n  const zoom = useAxisZoom({ direction: 'horizontal' });\n\n  useEffect(() => {\n    fetch('/data/nmr-1h.jdx').then((response) => {\n      response.text().then((jcamp) => {\n        const jcampData = convertJcamp(jcamp).flatten[0].spectra[0].data;\n        const data = xyToXYObject(jcampData);\n        setData(data);\n      });\n    });\n  }, []);\n\n  return (\n    <div>\n      <Plot width={800} height={300}>\n        <LineSeries data={data} xAxis=\"x\" yAxis=\"y\" />\n        <Axis\n          id=\"x\"\n          position=\"bottom\"\n          label=\"Chemical shift (\ud835\udec5)\"\n          displayPrimaryGridLines\n          flip={true}\n        />\n        <Axis position=\"left\" hidden={true} paddingStart={0.03} />\n        <Annotations>{zoom.annotations}</Annotations>\n      </Plot>\n    </div>\n  );\n}\n\nexport default function NMR1HPlot() {\n  return (\n    <PlotController>\n      <ZoomablePlot />\n    </PlotController>\n  );\n}\n",u=function(){return o.createElement(l.aE,null,o.createElement(d,null))};function x(e){const[t,n]=(0,o.useState)(!1);return o.createElement(o.Fragment,null,o.createElement("div",{className:"demo-example-wrapper"},o.createElement(u,null),o.createElement("div",{className:"demo-example-buttons"},o.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:o.createElement(m.Z,{name:"nmr1-h-plot",source:p,dependencies:{react:"^18.2.0","ml-spectra-processing":"^11.13.0","react-plot":"^0.20.4",jcampconverter:"^9.0.2"}},(()=>o.createElement("button",{type:"submit"},"Open sandbox"))))),t&&o.createElement(c.Z,{className:"language-jsx"},p))}function f(){const[e,t]=(0,o.useState)(),n=(0,l.AO)({direction:"horizontal"});return(0,o.useEffect)((()=>{fetch("/data/nmr-13c.jdx").then((e=>{e.text().then((e=>{const n=(0,s.O)(e).flatten[0].spectra[0].data,a=(0,i.G0)(n);t(a)}))}))}),[]),o.createElement("div",null,e?o.createElement(l.XN,{width:800,height:300},o.createElement(l.eh,{data:e,xAxis:"x",yAxis:"y"}),o.createElement(l.RD,{id:"x",position:"bottom",label:"Chemical shift (\ud835\udec5)",displayPrimaryGridLines:!0,flip:!0}),o.createElement(l.RD,{position:"left",hidden:!0,paddingStart:.03}),o.createElement(l.uN,null,n.annotations)):void 0)}const h="import { xyToXYObject } from 'ml-spectra-processing';\nimport React, { useEffect, useState } from 'react';\nimport {\n  Annotations,\n  Axis,\n  LineSeries,\n  Plot,\n  PlotController,\n  SeriesPoint,\n  useAxisZoom,\n} from 'react-plot';\nimport { convert as convertJcamp } from 'jcampconverter';\n\nfunction ZoomablePlot() {\n  const [data, setData] = useState<SeriesPoint[]>();\n  const zoom = useAxisZoom({ direction: 'horizontal' });\n  useEffect(() => {\n    fetch('/data/nmr-13c.jdx').then((response) => {\n      response.text().then((jcamp) => {\n        const jcampData = convertJcamp(jcamp).flatten[0].spectra[0].data;\n        const data = xyToXYObject(jcampData);\n        setData(data);\n      });\n    });\n  }, []);\n\n  return (\n    <div>\n      {data ? (\n        <Plot width={800} height={300}>\n          <LineSeries data={data} xAxis=\"x\" yAxis=\"y\" />\n          <Axis\n            id=\"x\"\n            position=\"bottom\"\n            label=\"Chemical shift (\ud835\udec5)\"\n            displayPrimaryGridLines\n            flip={true}\n          />\n          <Axis position=\"left\" hidden={true} paddingStart={0.03} />\n          <Annotations>{zoom.annotations}</Annotations>\n        </Plot>\n      ) : undefined}\n    </div>\n  );\n}\n\nexport default function NMR13CPlot() {\n  return (\n    <PlotController>\n      <ZoomablePlot />\n    </PlotController>\n  );\n}\n",E=function(){return o.createElement(l.aE,null,o.createElement(f,null))};function b(e){const[t,n]=(0,o.useState)(!1);return o.createElement(o.Fragment,null,o.createElement("div",{className:"demo-example-wrapper"},o.createElement(E,null),o.createElement("div",{className:"demo-example-buttons"},o.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:o.createElement(m.Z,{name:"nmr13-c-plot",source:h,dependencies:{"ml-spectra-processing":"^11.13.0",react:"^18.2.0","react-plot":"^0.20.4",jcampconverter:"^9.0.2"}},(()=>o.createElement("button",{type:"submit"},"Open sandbox"))))),t&&o.createElement(c.Z,{className:"language-jsx"},h))}const v={},y="NMR spectra",g={unversionedId:"experimental/nmr",id:"experimental/nmr",title:"NMR spectra",description:"Example of code loading and converting a jcamp (using jcampconverter)",source:"@site/docs/550_experimental/nmr.md",sourceDirName:"550_experimental",slug:"/experimental/nmr",permalink:"/experimental/nmr",draft:!1,editUrl:"https://github.com/zakodium-oss/react-plot-docs/tree/main/docs/550_experimental/nmr.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mass spectrum",permalink:"/experimental/mass"},next:{title:"Fetch",permalink:"/documentation/fetch"}},C={},j=[{value:"<sup>1</sup>H NMR",id:"1h-nmr",level:2},{value:"<sup>13</sup>C NMR",id:"13c-nmr",level:2}],A={toc:j};function P(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},A,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nmr-spectra"},"NMR spectra"),(0,r.kt)("p",null,"Example of code loading and converting a jcamp (using ",(0,r.kt)("inlineCode",{parentName:"p"},"jcampconverter"),")"),(0,r.kt)("h2",{id:"1h-nmr"},(0,r.kt)("sup",null,"1"),"H NMR"),(0,r.kt)(x,{noCodesandbox:!0,mdxType:"NMR1HDemo"}),(0,r.kt)("h2",{id:"13c-nmr"},(0,r.kt)("sup",null,"13"),"C NMR"),(0,r.kt)(b,{noCodesandbox:!0,mdxType:"NMR13CDemo"}))}P.isMDXComponent=!0}}]);