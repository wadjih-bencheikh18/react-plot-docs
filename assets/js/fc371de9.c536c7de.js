"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[7207],{9775:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>E,contentTitle:()=>b,default:()=>v,frontMatter:()=>f,metadata:()=>y,toc:()=>g});var a=n(7462),r=n(7294),o=n(3905),i=n(2854),s=n(8154),l=n(5802),c=n(814),m=n(1119);const p='import React from \'react\';\nimport { xyToXYObject } from \'ml-spectra-processing\';\nimport { useEffect, useState } from \'react\';\nimport {\n  Annotations,\n  Axis,\n  LineSeries,\n  Plot,\n  PlotController,\n  SeriesPoint,\n  useRectangularZoom,\n} from \'react-plot\';\n\nimport { convert as convertJcamp } from \'jcampconverter\';\n\nexport default function InfraredZoomablePlot() {\n  return (\n    <PlotController>\n      <ZoomablePlot />\n    </PlotController>\n  );\n}\n\nfunction ZoomablePlot() {\n  const [data, setData] = useState<SeriesPoint[]>([]);\n  const zoom = useRectangularZoom();\n\n  useEffect(() => {\n    fetch(\'/data/ir.jdx\').then((response) => {\n      response.text().then((jcamp) => {\n        const jcampData = convertJcamp(jcamp).flatten[0].spectra[0].data;\n        const xyData = xyToXYObject(jcampData).map((point) => ({\n          x: point.x,\n          y: point.y * 100,\n        }));\n        setData(xyData);\n      });\n    });\n  }, []);\n\n  return (\n    <Plot width={800} height={300}>\n      <LineSeries data={data} xAxis="x" yAxis="y" />\n      <Axis\n        id="x"\n        position="bottom"\n        label="Wavenumber (cm-1)"\n        displayPrimaryGridLines\n        flip={true}\n      />\n      <Axis\n        id="y"\n        position="left"\n        label="Transmitance (%)"\n        displayPrimaryGridLines\n      />\n      <Annotations>{zoom.annotations}</Annotations>\n    </Plot>\n  );\n}\n',d=function(){return r.createElement(s.aE,null,r.createElement(x,null))};function u(e){const[t,n]=(0,r.useState)(!1);return r.createElement(r.Fragment,null,r.createElement("div",{className:"demo-example-wrapper"},r.createElement(d,null),r.createElement("div",{className:"demo-example-buttons"},r.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:r.createElement(m.Z,{name:"infrared-zoomable-plot",source:p,dependencies:{react:"^18.2.0","ml-spectra-processing":"^11.13.0","react-plot":"^0.20.4",jcampconverter:"^9.0.2"}},(()=>r.createElement("button",{type:"submit"},"Open sandbox"))))),t&&r.createElement(c.Z,{className:"language-jsx"},p))}function x(){const[e,t]=(0,r.useState)([]),n=(0,s.NU)();return(0,r.useEffect)((()=>{fetch("/data/ir.jdx").then((e=>{e.text().then((e=>{const n=(0,l.O)(e).flatten[0].spectra[0].data,a=(0,i.G0)(n).map((e=>({x:e.x,y:100*e.y})));t(a)}))}))}),[]),r.createElement(s.XN,{width:800,height:300},r.createElement(s.eh,{data:e,xAxis:"x",yAxis:"y"}),r.createElement(s.RD,{id:"x",position:"bottom",label:"Wavenumber (cm-1)",displayPrimaryGridLines:!0,flip:!0}),r.createElement(s.RD,{id:"y",position:"left",label:"Transmitance (%)",displayPrimaryGridLines:!0}),r.createElement(s.uN,null,n.annotations))}const f={},b="Infrared spectrum",y={unversionedId:"experimental/ir",id:"experimental/ir",title:"Infrared spectrum",description:"Example of code loading and converting a jcamp (using jcampconverter)",source:"@site/docs/550_experimental/ir.md",sourceDirName:"550_experimental",slug:"/experimental/ir",permalink:"/experimental/ir",draft:!1,editUrl:"https://github.com/zakodium-oss/react-plot-docs/tree/main/docs/550_experimental/ir.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ScalarValue",permalink:"/types/scalarValue"},next:{title:"Mass spectrum",permalink:"/experimental/mass"}},E={},g=[],h={toc:g};function v(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"infrared-spectrum"},"Infrared spectrum"),(0,o.kt)("p",null,"Example of code loading and converting a jcamp (using ",(0,o.kt)("inlineCode",{parentName:"p"},"jcampconverter"),")"),(0,o.kt)(u,{noCodesandbox:!0,mdxType:"InfraredDemo"}))}v.isMDXComponent=!0}}]);