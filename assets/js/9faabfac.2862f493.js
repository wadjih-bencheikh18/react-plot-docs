"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[819],{2180:function(e,t,n){n.r(t),n.d(t,{assets:function(){return A},contentTitle:function(){return C},default:function(){return k},frontMatter:function(){return g},metadata:function(){return j},toc:function(){return P}});var a=n(7462),o=n(3366),r=n(7294),i=n(3905),c=n(8308),l=n(1059),s=n(799),m=n(1736),u=n(1119);function d(){var e=(0,r.useState)([]),t=e[0],n=e[1],a=(0,l.AO)({direction:"horizontal"});return(0,r.useEffect)((function(){fetch("/data/nmr-1h.jdx").then((function(e){e.text().then((function(e){var t=(0,s.O)(e).flatten[0].spectra[0].data,a=(0,c.G0)(t);n(a)}))}))}),[]),r.createElement("div",null,r.createElement(l.XN,{width:800,height:300},r.createElement(l.eh,{data:t,xAxis:"x",yAxis:"y"}),r.createElement(l.RD,{id:"x",position:"bottom",label:"Chemical shift (\ud835\udec5)",displayPrimaryGridLines:!0,flip:!0}),r.createElement(l.RD,{position:"left",hidden:!0,paddingStart:.03}),r.createElement(l.uN,null,a.annotations)))}var p="import React from 'react';\nimport { xyToXYObject } from 'ml-spectra-processing';\nimport { useEffect, useState } from 'react';\nimport {\n  Annotations,\n  Axis,\n  LineSeries,\n  Plot,\n  PlotController,\n  SeriesPoint,\n  useAxisZoom,\n} from 'react-plot';\nimport { convert as convertJcamp } from 'jcampconverter';\n\nfunction ZoomablePlot() {\n  const [data, setData] = useState<SeriesPoint[]>([]);\n  const zoom = useAxisZoom({ direction: 'horizontal' });\n\n  useEffect(() => {\n    fetch('/data/nmr-1h.jdx').then((response) => {\n      response.text().then((jcamp) => {\n        const jcampData = convertJcamp(jcamp).flatten[0].spectra[0].data;\n        const data = xyToXYObject(jcampData);\n        setData(data);\n      });\n    });\n  }, []);\n\n  return (\n    <div>\n      <Plot width={800} height={300}>\n        <LineSeries data={data} xAxis=\"x\" yAxis=\"y\" />\n        <Axis\n          id=\"x\"\n          position=\"bottom\"\n          label=\"Chemical shift (\ud835\udec5)\"\n          displayPrimaryGridLines\n          flip={true}\n        />\n        <Axis position=\"left\" hidden={true} paddingStart={0.03} />\n        <Annotations>{zoom.annotations}</Annotations>\n      </Plot>\n    </div>\n  );\n}\n\nexport default function NMR1HPlot() {\n  return (\n    <PlotController>\n      <ZoomablePlot />\n    </PlotController>\n  );\n}\n",f=function(){return r.createElement(l.aE,null,r.createElement(d,null))};function x(e){var t=(0,r.useState)(!1),n=t[0],a=t[1];return r.createElement(r.Fragment,null,r.createElement("div",{className:"demo-example-wrapper"},r.createElement(f,null),r.createElement("div",{className:"demo-example-buttons"},r.createElement("button",{onClick:function(){return a((function(e){return!e}))},type:"button",style:{backgroundColor:n?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:r.createElement(u.Z,{name:"nmr1-h-plot",source:p,dependencies:{react:"^17.0.2","ml-spectra-processing":"^11.0.0","react-plot":"^0.16.0",jcampconverter:"^8.2.5"}},(function(){return r.createElement("button",{type:"submit"},"Open sandbox")})))),n&&r.createElement(m.Z,{className:"language-jsx"},p))}function h(){var e=(0,r.useState)(),t=e[0],n=e[1],a=(0,l.AO)({direction:"horizontal"});return(0,r.useEffect)((function(){fetch("/data/nmr-13c.jdx").then((function(e){e.text().then((function(e){var t=(0,s.O)(e).flatten[0].spectra[0].data,a=(0,c.G0)(t);n(a)}))}))}),[]),r.createElement("div",null,t?r.createElement(l.XN,{width:800,height:300},r.createElement(l.eh,{data:t,xAxis:"x",yAxis:"y"}),r.createElement(l.RD,{id:"x",position:"bottom",label:"Chemical shift (\ud835\udec5)",displayPrimaryGridLines:!0,flip:!0}),r.createElement(l.RD,{position:"left",hidden:!0,paddingStart:.03}),r.createElement(l.uN,null,a.annotations)):void 0)}var v="import { xyToXYObject } from 'ml-spectra-processing';\nimport React, { useEffect, useState } from 'react';\nimport {\n  Annotations,\n  Axis,\n  LineSeries,\n  Plot,\n  PlotController,\n  SeriesPoint,\n  useAxisZoom,\n} from 'react-plot';\nimport { convert as convertJcamp } from 'jcampconverter';\n\nfunction ZoomablePlot() {\n  const [data, setData] = useState<SeriesPoint[]>();\n  const zoom = useAxisZoom({ direction: 'horizontal' });\n  useEffect(() => {\n    fetch('/data/nmr-13c.jdx').then((response) => {\n      response.text().then((jcamp) => {\n        const jcampData = convertJcamp(jcamp).flatten[0].spectra[0].data;\n        const data = xyToXYObject(jcampData);\n        setData(data);\n      });\n    });\n  }, []);\n\n  return (\n    <div>\n      {data ? (\n        <Plot width={800} height={300}>\n          <LineSeries data={data} xAxis=\"x\" yAxis=\"y\" />\n          <Axis\n            id=\"x\"\n            position=\"bottom\"\n            label=\"Chemical shift (\ud835\udec5)\"\n            displayPrimaryGridLines\n            flip={true}\n          />\n          <Axis position=\"left\" hidden={true} paddingStart={0.03} />\n          <Annotations>{zoom.annotations}</Annotations>\n        </Plot>\n      ) : undefined}\n    </div>\n  );\n}\n\nexport default function NMR13CPlot() {\n  return (\n    <PlotController>\n      <ZoomablePlot />\n    </PlotController>\n  );\n}\n",E=function(){return r.createElement(l.aE,null,r.createElement(h,null))};function b(e){var t=(0,r.useState)(!1),n=t[0],a=t[1];return r.createElement(r.Fragment,null,r.createElement("div",{className:"demo-example-wrapper"},r.createElement(E,null),r.createElement("div",{className:"demo-example-buttons"},r.createElement("button",{onClick:function(){return a((function(e){return!e}))},type:"button",style:{backgroundColor:n?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:r.createElement(u.Z,{name:"nmr13-c-plot",source:v,dependencies:{"ml-spectra-processing":"^11.0.0",react:"^17.0.2","react-plot":"^0.16.0",jcampconverter:"^8.2.5"}},(function(){return r.createElement("button",{type:"submit"},"Open sandbox")})))),n&&r.createElement(m.Z,{className:"language-jsx"},v))}var y=["components"],g={},C="NMR spectra",j={unversionedId:"experimental/nmr",id:"experimental/nmr",title:"NMR spectra",description:"Example of code loading and converting a jcamp (using jcampconverter)",source:"@site/docs/500_experimental/nmr.md",sourceDirName:"500_experimental",slug:"/experimental/nmr",permalink:"/experimental/nmr",editUrl:"https://github.com/zakodium/react-plot-docs/tree/main/docs/500_experimental/nmr.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mass spectrum",permalink:"/experimental/mass"},next:{title:"Fetch",permalink:"/documentation/fetch"}},A={},P=[{value:"<sup>1</sup>H NMR",id:"1h-nmr",level:2},{value:"<sup>13</sup>C NMR",id:"13c-nmr",level:2}],N={toc:P};function k(e){var t=e.components,n=(0,o.Z)(e,y);return(0,i.kt)("wrapper",(0,a.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"nmr-spectra"},"NMR spectra"),(0,i.kt)("p",null,"Example of code loading and converting a jcamp (using ",(0,i.kt)("inlineCode",{parentName:"p"},"jcampconverter"),")"),(0,i.kt)("h2",{id:"1h-nmr"},(0,i.kt)("sup",null,"1"),"H NMR"),(0,i.kt)(x,{noCodesandbox:!0,mdxType:"NMR1HDemo"}),(0,i.kt)("h2",{id:"13c-nmr"},(0,i.kt)("sup",null,"13"),"C NMR"),(0,i.kt)(b,{noCodesandbox:!0,mdxType:"NMR13CDemo"}))}k.isMDXComponent=!0}}]);