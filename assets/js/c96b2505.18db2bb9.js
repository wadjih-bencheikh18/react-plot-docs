"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[1181],{900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>D,contentTitle:()=>L,default:()=>F,frontMatter:()=>R,metadata:()=>X,toc:()=>U});var o=n(7462),a=n(7294),l=n(3905),r=n(8154),i=n(814),s=n(1119);function m(){const e=(0,r.NU)();return a.createElement(r.XN,{width:300,height:300},a.createElement(r.X6,{title:"Draw a rectangle"}),a.createElement(r.eh,{data:[{x:1,y:1},{x:2,y:2},{x:3,y:3},{x:4,y:2},{x:5,y:1}]}),a.createElement(r.uN,null,e.annotations))}const u="import React from 'react';\n\nimport {\n  Annotations,\n  Heading,\n  LineSeries,\n  Plot,\n  PlotController,\n  useRectangularZoom,\n} from 'react-plot';\n\nfunction ZoomablePlot() {\n  const zoom = useRectangularZoom();\n  return (\n    <Plot width={300} height={300}>\n      <Heading title=\"Draw a rectangle\" />\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n      <Annotations>{zoom.annotations}</Annotations>\n    </Plot>\n  );\n}\n\nexport default function UseRectangularZoom() {\n  return (\n    <PlotController>\n      <ZoomablePlot />\n    </PlotController>\n  );\n}\n",c=function(){return a.createElement(r.aE,null,a.createElement(m,null))};function p(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(c,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"use-rectangular-zoom",source:u,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(i.Z,{className:"language-jsx"},u))}function d(){const e=(0,r.NU)();return a.createElement(r.XN,{width:300,height:300},a.createElement(r.X6,{title:"Draw a rectangle"}),a.createElement(r.eh,{data:[{x:1,y:1},{x:2,y:2},{x:3,y:3},{x:4,y:2},{x:5,y:1}]}),a.createElement(r.uN,null,e.annotations))}const k="import React from 'react';\nimport {\n  Annotations,\n  Heading,\n  LineSeries,\n  Plot,\n  PlotController,\n  useRectangularZoom,\n} from 'react-plot';\n\nfunction ZoomablePlot() {\n  const zoom = useRectangularZoom();\n  return (\n    <Plot width={300} height={300}>\n      <Heading title=\"Draw a rectangle\" />\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n      <Annotations>{zoom.annotations}</Annotations>\n    </Plot>\n  );\n}\n\nexport default function MultiRectangularZoom() {\n  return (\n    <PlotController>\n      <ZoomablePlot />\n      <ZoomablePlot />\n    </PlotController>\n  );\n}\n",h=function(){return a.createElement(r.aE,null,a.createElement(d,null),a.createElement(d,null))};function x(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(h,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"multi-rectangular-zoom",source:k,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(i.Z,{className:"language-jsx"},k))}function N(){const e=(0,r.AO)();return a.createElement(r.XN,{width:300,height:300},a.createElement(r.X6,{title:"Draw a rectangle"}),a.createElement(r.eh,{data:[{x:1,y:1},{x:2,y:2},{x:3,y:3},{x:4,y:2},{x:5,y:1}]}),a.createElement(r.uN,null,e.annotations))}const g="import React from 'react';\nimport {\n  Annotations,\n  Heading,\n  LineSeries,\n  Plot,\n  PlotController,\n  useAxisZoom,\n} from 'react-plot';\nfunction ZoomablePlot() {\n  const zoom = useAxisZoom();\n  return (\n    <Plot width={300} height={300}>\n      <Heading title=\"Draw a rectangle\" />\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n      <Annotations>{zoom.annotations}</Annotations>\n    </Plot>\n  );\n}\nexport default function UseAxisZoom() {\n  return (\n    <PlotController>\n      <ZoomablePlot />\n    </PlotController>\n  );\n}\n",y=function(){return a.createElement(r.aE,null,a.createElement(N,null))};function f(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(y,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"use-axis-zoom",source:g,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(i.Z,{className:"language-jsx"},g))}function C(){return(0,r.l1)(),a.createElement(r.XN,{width:300,height:300},a.createElement(r.X6,{title:"Scroll inside the plot"}),a.createElement(r.eh,{data:[{x:1,y:1},{x:2,y:2},{x:3,y:3},{x:4,y:2},{x:5,y:1}]}))}const b="import React from 'react';\nimport {\n  Annotations,\n  Heading,\n  LineSeries,\n  Plot,\n  PlotController,\n  useAxisWheelZoom,\n  usePan,\n  useRectangularZoom,\n} from 'react-plot';\n\nfunction WheelPlot() {\n  useAxisWheelZoom();\n  return (\n    <Plot width={300} height={300}>\n      <Heading title=\"Scroll inside the plot\" />\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n    </Plot>\n  );\n}\n\nexport default function UseAxisWheelZoom() {\n  return (\n    <PlotController>\n      <WheelPlot />\n    </PlotController>\n  );\n}\n",E=function(){return a.createElement(r.aE,null,a.createElement(C,null))};function P(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(E,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"use-axis-wheel-zoom",source:b,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(i.Z,{className:"language-jsx"},b))}function w(){return(0,r.od)(),a.createElement(r.XN,{width:300,height:300},a.createElement(r.X6,{title:"Press ALT, Grab and drag"}),a.createElement(r.eh,{data:[{x:1,y:1},{x:2,y:2},{x:3,y:3},{x:4,y:2},{x:5,y:1}]}))}const Z="import React from 'react';\nimport {\n  Annotations,\n  Heading,\n  LineSeries,\n  Plot,\n  PlotController,\n  usePan,\n  useRectangularZoom,\n} from 'react-plot';\n\nfunction PanPlot() {\n  usePan();\n  return (\n    <Plot width={300} height={300}>\n      <Heading title=\"Press ALT, Grab and drag\" />\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n    </Plot>\n  );\n}\n\nexport default function UsePan() {\n  return (\n    <PlotController>\n      <PanPlot />\n    </PlotController>\n  );\n}\n",z=function(){return a.createElement(r.aE,null,a.createElement(w,null))};function v(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(z,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"use-pan",source:Z,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(i.Z,{className:"language-jsx"},Z))}function A(){const e=(0,r.GP)();return a.createElement(r.XN,{width:300,height:300},a.createElement(r.X6,{title:"Move the mouse inside"}),a.createElement(r.eh,{data:[{x:1,y:1},{x:2,y:2},{x:3,y:3},{x:4,y:2},{x:5,y:1}]}),a.createElement(r.uN,null,e.annotations))}const H="import React from 'react';\nimport {\n  Annotations,\n  Heading,\n  LineSeries,\n  Plot,\n  PlotController,\n  useCrossHair,\n} from 'react-plot';\n\nfunction CrossHairPlot() {\n  const crossHair = useCrossHair();\n  return (\n    <Plot width={300} height={300}>\n      <Heading title=\"Move the mouse inside\" />\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n      <Annotations>{crossHair.annotations}</Annotations>\n    </Plot>\n  );\n}\n\nexport default function UseCrossHair() {\n  return (\n    <PlotController>\n      <CrossHairPlot />\n    </PlotController>\n  );\n}\n",T=function(){return a.createElement(r.aE,null,a.createElement(A,null))};function S(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(T,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"use-cross-hair",source:H,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(i.Z,{className:"language-jsx"},H))}const R={},L="Functional",X={unversionedId:"hooks/functional",id:"hooks/functional",title:"Functional",description:"These hooks allow you to do specific precoded functionalities.",source:"@site/docs/400_hooks/300_functional.md",sourceDirName:"400_hooks",slug:"/hooks/functional",permalink:"/hooks/functional",draft:!1,editUrl:"https://github.com/zakodium-oss/react-plot-docs/tree/main/docs/400_hooks/300_functional.md",tags:[],version:"current",sidebarPosition:300,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Draw",permalink:"/hooks/draw"},next:{title:"Introduction",permalink:"/illustrations/intro"}},D={},U=[{value:"useAxisZoom",id:"useaxiszoom",level:2},{value:"useRectangularZoom",id:"userectangularzoom",level:2},{value:"useAxisWheelZoom",id:"useaxiswheelzoom",level:2},{value:"useCrossHair",id:"usecrosshair",level:2},{value:"usePan",id:"usepan",level:2}],W={toc:U};function F(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,o.Z)({},W,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"functional"},"Functional"),(0,l.kt)("p",null,"These hooks allow you to do specific precoded functionalities."),(0,l.kt)("p",null,"Currently we support following functional hooks:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"/hooks/functional#useaxiszoom"},"useAxisZoom"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"/hooks/functional#userectangularzoom"},"useRectangularZoom"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"/hooks/functional#useaxiswheelzoom"},"useAxisWheelZoom"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"/hooks/functional#usecrosshair"},"useCrossHair"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"/hooks/functional#usepan"},"usePan")))),(0,l.kt)("h2",{id:"useaxiszoom"},"useAxisZoom"),(0,l.kt)("p",null,"This hook allows to zoom in a plot along the specified axis (default to horizontal) while drawing a rectangle. There are 3 steps in order to implement the zoom:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"wrap your plot component in ",(0,l.kt)("inlineCode",{parentName:"li"},"<PlotController>")),(0,l.kt)("li",{parentName:"ul"},"add the hook: ",(0,l.kt)("inlineCode",{parentName:"li"},"const zoom = useAxisZoom({direction:'horizontal'});")),(0,l.kt)("li",{parentName:"ul"},"add the ",(0,l.kt)("inlineCode",{parentName:"li"},"zoom.annotations")," in order to draw the zoom rectangle: ",(0,l.kt)("inlineCode",{parentName:"li"},"<Annotations>{zoom.annotations}</Annotations>"))),(0,l.kt)("p",null,"This hook also implements the ",(0,l.kt)("inlineCode",{parentName:"p"},"double click")," detection to reset the zoom to its original value."),(0,l.kt)(f,{mdxType:"UseAxisZoom"}),(0,l.kt)("h2",{id:"userectangularzoom"},"useRectangularZoom"),(0,l.kt)("p",null,"This hook allows to directly manage the zoom in a plot. There are 3 steps in order to implement the zoom:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"wrap your plot component in ",(0,l.kt)("inlineCode",{parentName:"li"},"<PlotController>")),(0,l.kt)("li",{parentName:"ul"},"add the hook: ",(0,l.kt)("inlineCode",{parentName:"li"},"const zoom = useRectangularZoom();")),(0,l.kt)("li",{parentName:"ul"},"add the ",(0,l.kt)("inlineCode",{parentName:"li"},"zoom.annotations")," in order to draw the zoom rectangle: ",(0,l.kt)("inlineCode",{parentName:"li"},"<Annotations>{zoom.annotations}</Annotations>"))),(0,l.kt)("p",null,"This hook also implements the ",(0,l.kt)("inlineCode",{parentName:"p"},"double click")," detection to reset the zoom to its original value."),(0,l.kt)(p,{mdxType:"UseRectangularZoomDemo"}),(0,l.kt)("p",null,"If a ",(0,l.kt)("inlineCode",{parentName:"p"},"PlotController")," contains several ",(0,l.kt)("inlineCode",{parentName:"p"},"Plot")," elements, the change will be applied on all of them."),(0,l.kt)(x,{mdxType:"MultiRectangularZoom"}),(0,l.kt)("h2",{id:"useaxiswheelzoom"},"useAxisWheelZoom"),(0,l.kt)("p",null,"This hook allows to zoom in a plot along the specified axis (default to vertical) using mouse wheel."),(0,l.kt)("p",null,"The hook may be customized with following props:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"center")," : it defines zoom center, used to choose a specific point or the mouse cursor ",(0,l.kt)("inlineCode",{parentName:"p"},'"pointer"')," as zoom center",(0,l.kt)("br",null),"\ntype : ",(0,l.kt)("inlineCode",{parentName:"p"},'number | "pointer"'),(0,l.kt)("br",null),"\ndefault : ",(0,l.kt)("inlineCode",{parentName:"p"},"0"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"factor")," : controls zoom speed",(0,l.kt)("br",null),"\ntype : ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),(0,l.kt)("br",null),"\ndefault : ",(0,l.kt)("inlineCode",{parentName:"p"},'"0"'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"invert")," : inverts wheel zooming (default wheel up will zoom in our plot)",(0,l.kt)("br",null),"\ntype : ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null),"\ndefault : ",(0,l.kt)("inlineCode",{parentName:"p"},"false")))),(0,l.kt)("p",null,"There are 2 steps in order to implement the wheel zoom:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"wrap your plot component in ",(0,l.kt)("inlineCode",{parentName:"li"},"<PlotController>")),(0,l.kt)("li",{parentName:"ul"},"add the hook: ",(0,l.kt)("inlineCode",{parentName:"li"},"useAxisWheelZoom({direction:'vertical', center:0, factor:1, invert:false})"))),(0,l.kt)("p",null,"This hook also implements the ",(0,l.kt)("inlineCode",{parentName:"p"},"double click")," detection to reset the zoom to its original value."),(0,l.kt)(P,{mdxType:"UseAxisWheelZoom"}),(0,l.kt)("h2",{id:"usecrosshair"},"useCrossHair"),(0,l.kt)("p",null,"This hook adds crossHair to the plot .\nThe hook may be customized with the following props:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"color")," : crossHair color",(0,l.kt)("br",null),"\ntype : ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null),"\ndefault : ",(0,l.kt)("inlineCode",{parentName:"p"},'"black"'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"lineStyle")," : adds style to crossHair line",(0,l.kt)("br",null),"\ntype : ",(0,l.kt)("inlineCode",{parentName:"p"},"CSSProperties"),(0,l.kt)("br",null),"\ndefault : ",(0,l.kt)("inlineCode",{parentName:"p"},"{}"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"textStyle")," : adds style to crossHair text",(0,l.kt)("br",null),"\ntype : ",(0,l.kt)("inlineCode",{parentName:"p"},"CSSProperties"),(0,l.kt)("br",null),"\ndefault : ",(0,l.kt)("inlineCode",{parentName:"p"},"{}"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"textTransform")," : trasforms crossHair text",(0,l.kt)("br",null),"\ntype : ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),(0,l.kt)("br",null),"\ndefault : ",(0,l.kt)("inlineCode",{parentName:"p"},'""')))),(0,l.kt)("p",null,"There are 3 steps in order to implement the crossHair:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"wrap your plot component in ",(0,l.kt)("inlineCode",{parentName:"li"},"<PlotController>")),(0,l.kt)("li",{parentName:"ul"},"add the hook: ",(0,l.kt)("inlineCode",{parentName:"li"},"const crossHair = useCrossHair();")),(0,l.kt)("li",{parentName:"ul"},"add the ",(0,l.kt)("inlineCode",{parentName:"li"},"crossHair.annotations")," in order to draw CrossHair: ",(0,l.kt)("inlineCode",{parentName:"li"},"<Annotations>{crossHair.annotations}</Annotations>"))),(0,l.kt)(S,{mdxType:"UseCrossHairDemo"}),(0,l.kt)("h2",{id:"usepan"},"usePan"),(0,l.kt)("p",null,"This hook adds an interactive pan to the plot to move in any direction while holding ",(0,l.kt)("inlineCode",{parentName:"p"},"ALT"),". There are 2 steps in order to implement the pan:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"wrap your plot component in ",(0,l.kt)("inlineCode",{parentName:"li"},"<PlotController>")),(0,l.kt)("li",{parentName:"ul"},"add the hook: ",(0,l.kt)("inlineCode",{parentName:"li"},"usePan();"))),(0,l.kt)("p",null,"This hook also implements the ",(0,l.kt)("inlineCode",{parentName:"p"},"double click")," detection to reset the zoom to its original value."),(0,l.kt)(v,{mdxType:"UsePanDemo"}))}F.isMDXComponent=!0}}]);