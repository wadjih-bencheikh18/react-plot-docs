"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[467],{1299:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return v},default:function(){return k},frontMatter:function(){return y},metadata:function(){return E},toc:function(){return h}});var r=t(7462),a=t(3366),o=t(7294),i=t(3905),c=t(4100),l=t(1059),s=t(6366),m=t(1736),p=t(1119),u='import React from \'react\';\nimport { xyToXYObject } from \'ml-spectra-processing\';\nimport { useEffect, useState } from \'react\';\nimport {\n  Annotations,\n  Axis,\n  LineSeries,\n  Plot,\n  PlotController,\n  SeriesPoint,\n  useRectangularZoom,\n} from \'react-plot\';\n\nimport { convert as convertJcamp } from \'jcampconverter\';\n\nexport default function InfraredZoomablePlot() {\n  return (\n    <PlotController>\n      <ZoomablePlot />\n    </PlotController>\n  );\n}\n\nfunction ZoomablePlot() {\n  const [data, setData] = useState<SeriesPoint[]>([]);\n  const zoom = useRectangularZoom();\n\n  useEffect(() => {\n    fetch(\'/data/ir.jdx\').then((response) => {\n      response.text().then((jcamp) => {\n        const jcampData = convertJcamp(jcamp).flatten[0].spectra[0].data;\n        const xyData = xyToXYObject(jcampData).map((point) => ({\n          x: point.x,\n          y: point.y * 100,\n        }));\n        setData(xyData);\n      });\n    });\n  }, []);\n\n  return (\n    <Plot width={800} height={300}>\n      <LineSeries data={data} xAxis="x" yAxis="y" />\n      <Axis\n        id="x"\n        position="bottom"\n        label="Wavenumber (cm-1)"\n        displayPrimaryGridLines\n        flip={true}\n      />\n      <Axis\n        id="y"\n        position="left"\n        label="Transmitance (%)"\n        displayPrimaryGridLines\n      />\n      <Annotations>{zoom.annotations}</Annotations>\n    </Plot>\n  );\n}\n',d=function(){return o.createElement(l.aE,null,o.createElement(x,null))};function f(e){var n=(0,o.useState)(!1),t=n[0],r=n[1];return o.createElement(o.Fragment,null,o.createElement("div",{className:"demo-example-wrapper"},o.createElement(d,null),o.createElement("div",{className:"demo-example-buttons"},o.createElement("button",{onClick:function(){return r((function(e){return!e}))},type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:o.createElement(p.Z,{name:"infrared-zoomable-plot",source:u,dependencies:{react:"^17.0.2","ml-spectra-processing":"^9.1.0","react-plot":"^0.16.0",jcampconverter:"^8.2.4"}},(function(){return o.createElement("button",{type:"submit"},"Open sandbox")})))),t&&o.createElement(m.Z,{className:"language-jsx"},u))}function x(){var e=(0,o.useState)([]),n=e[0],t=e[1],r=(0,l.NU)();return(0,o.useEffect)((function(){fetch("/data/ir.jdx").then((function(e){e.text().then((function(e){var n=(0,s.O)(e).flatten[0].spectra[0].data,r=(0,c.G0)(n).map((function(e){return{x:e.x,y:100*e.y}}));t(r)}))}))}),[]),o.createElement(l.XN,{width:800,height:300},o.createElement(l.eh,{data:n,xAxis:"x",yAxis:"y"}),o.createElement(l.RD,{id:"x",position:"bottom",label:"Wavenumber (cm-1)",displayPrimaryGridLines:!0,flip:!0}),o.createElement(l.RD,{id:"y",position:"left",label:"Transmitance (%)",displayPrimaryGridLines:!0}),o.createElement(l.uN,null,r.annotations))}var b=["components"],y={},v="Infrared spectrum",E={unversionedId:"experimental/ir",id:"experimental/ir",title:"Infrared spectrum",description:"Example of code loading and converting a jcamp (using jcampconverter)",source:"@site/docs/500_experimental/ir.md",sourceDirName:"500_experimental",slug:"/experimental/ir",permalink:"/experimental/ir",editUrl:"https://github.com/zakodium/react-plot-docs/tree/main/docs/500_experimental/ir.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hooks",permalink:"/hooks/intro"},next:{title:"Mass spectrum",permalink:"/experimental/mass"}},h=[],g={toc:h};function k(e){var n=e.components,t=(0,a.Z)(e,b);return(0,i.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"infrared-spectrum"},"Infrared spectrum"),(0,i.kt)("p",null,"Example of code loading and converting a jcamp (using ",(0,i.kt)("inlineCode",{parentName:"p"},"jcampconverter"),")"),(0,i.kt)(f,{noCodesandbox:!0,mdxType:"InfraredDemo"}))}k.isMDXComponent=!0}}]);