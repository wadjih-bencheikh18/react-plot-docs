"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[394],{1929:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>O,contentTitle:()=>X,default:()=>H,frontMatter:()=>j,metadata:()=>$,toc:()=>_});var l=n(7462),a=n(7294),i=n(3905),r=n(8154),o=n(814),s=n(1119);const m='import React from \'react\';\nimport { Plot, Axis, ParallelAxis } from \'react-plot\';\n\nexport default function Series() {\n  return (\n    <Plot width={600} height={100}>\n      <Axis id="x" min={0} max={6} position="bottom" label="Base Axis" />\n      <ParallelAxis id="x" label="Parallel Axis" />\n      {/** hidden axis */}\n      <Axis min={0} max={1} position="left" hidden />\n    </Plot>\n  );\n}\n',d=function(){return a.createElement(r.XN,{width:600,height:100},a.createElement(r.RD,{id:"x",min:0,max:6,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",label:"Parallel Axis"}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0}))};function c(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(d,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"series",source:m,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(o.Z,{className:"language-jsx"},m))}const p='import React from \'react\';\nimport { Plot, LineSeries, Axis, ParallelAxis } from \'react-plot\';\n\nexport default function Series() {\n  return (\n    <Plot width={300} height={300}>\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n      <Axis id="y" position="left" label="Base Axis" />\n      <ParallelAxis id="y" label="Parallel Axis" hidden />\n    </Plot>\n  );\n}\n',x=function(){return a.createElement(r.XN,{width:300,height:300},a.createElement(r.eh,{data:[{x:1,y:1},{x:2,y:2},{x:3,y:3},{x:4,y:2},{x:5,y:1}]}),a.createElement(r.RD,{id:"y",position:"left",label:"Base Axis"}),a.createElement(r.u$,{id:"y",label:"Parallel Axis",hidden:!0}))};function u(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(x,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"series",source:p,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(o.Z,{className:"language-jsx"},p))}const b='import React from \'react\';\nimport { Plot, Axis, ParallelAxis } from \'react-plot\';\n\nexport default function Series() {\n  return (\n    <Plot width={300} height={100}>\n      <Axis id="x" max={20} min={0} position="bottom" label="Base Axis" />\n      <ParallelAxis\n        id="x"\n        lineStyle={{ stroke: \'red\' }}\n        label="Change line style"\n      />\n\n      {/** hidden axis */}\n      <Axis min={0} max={1} position="left" hidden />\n    </Plot>\n  );\n}\n',k=function(){return a.createElement(r.XN,{width:300,height:100},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",lineStyle:{stroke:"red"},label:"Change line style"}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0}))};function h(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(k,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"series",source:b,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(o.Z,{className:"language-jsx"},b))}const f='import React from \'react\';\nimport { Plot, Axis, ParallelAxis } from \'react-plot\';\n\nexport default function Series() {\n  return (\n    <Plot width={300} height={100}>\n      <Axis id="x" max={20} min={0} position="bottom" label="Base Axis" />\n\n      <ParallelAxis\n        id="x"\n        label="Parallel Axis Label"\n        labelStyle={{ fill: \'green\', fontSize: \'25px\', fontWeight: \'bold\' }}\n      />\n      {/** hidden axis */}\n      <Axis min={0} max={1} position="left" hidden />\n    </Plot>\n  );\n}\n',y=function(){return a.createElement(r.XN,{width:300,height:100},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",label:"Parallel Axis Label",labelStyle:{fill:"green",fontSize:"25px",fontWeight:"bold"}}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0}))};function E(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(y,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"series",source:f,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(o.Z,{className:"language-jsx"},f))}const A='import React from \'react\';\nimport { Plot, Axis, ParallelAxis } from \'react-plot\';\n\nexport default function Series() {\n  return (\n    <Plot width={300} height={80}>\n      <Axis id="x" max={20} min={0} position="bottom" label="Base Axis" />\n      <ParallelAxis id="x" label="Parallel Axis Hidden Ticks" hiddenTicks />\n      {/** hidden axis */}\n      <Axis min={0} max={1} position="left" hidden />\n    </Plot>\n  );\n}\n',g=function(){return a.createElement(r.XN,{width:300,height:80},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",label:"Parallel Axis Hidden Ticks",hiddenTicks:!0}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0}))};function N(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(g,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"series",source:A,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(o.Z,{className:"language-jsx"},A))}const P='import React from \'react\';\nimport { Plot, Axis, ParallelAxis } from \'react-plot\';\n\nexport default function Series() {\n  return (\n    <div\n      style={{\n        display: \'flex\',\n        flexWrap: \'wrap\',\n        gap: \'20px 90px\',\n        justifyContent: \'center\',\n      }}\n    >\n      <Plot width={300} height={100}>\n        <Axis id="x" max={20} min={0} position="bottom" label="Base Axis" />\n        <ParallelAxis\n          id="x"\n          label="Parallel Inner Ticks"\n          tickPosition="inner"\n        />\n        {/** hidden axis */}\n        <Axis min={0} max={1} position="left" hidden />\n      </Plot>\n      <Plot width={300} height={100}>\n        <Axis id="x" max={20} min={0} position="bottom" label="Base Axis" />\n        <ParallelAxis\n          id="x"\n          label="Parallel Outer Ticks"\n          tickPosition="outer"\n        />\n        {/** hidden axis */}\n        <Axis min={0} max={1} position="left" hidden />\n      </Plot>\n      <Plot width={300} height={100}>\n        <Axis id="x" max={20} min={0} position="bottom" label="Base Axis" />\n        <ParallelAxis\n          id="x"\n          label="Parallel Center Ticks"\n          tickPosition="center"\n        />\n        {/** hidden axis */}\n        <Axis min={0} max={1} position="left" hidden />\n      </Plot>\n    </div>\n  );\n}\n',C=function(){return a.createElement("div",{style:{display:"flex",flexWrap:"wrap",gap:"20px 90px",justifyContent:"center"}},a.createElement(r.XN,{width:300,height:100},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",label:"Parallel Inner Ticks",tickPosition:"inner"}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0})),a.createElement(r.XN,{width:300,height:100},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",label:"Parallel Outer Ticks",tickPosition:"outer"}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0})),a.createElement(r.XN,{width:300,height:100},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",label:"Parallel Center Ticks",tickPosition:"center"}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0})))};function v(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(C,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"series",source:P,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(o.Z,{className:"language-jsx"},P))}const S='import React from \'react\';\nimport { Plot, Axis, ParallelAxis } from \'react-plot\';\n\nexport default function Series() {\n  return (\n    <div\n      style={{\n        display: \'flex\',\n        gap: \'80px\',\n        justifyContent: \'center\',\n      }}\n    >\n      <Plot width={300} height={100}>\n        <Axis id="x" max={20} min={0} position="bottom" label="Base Axis" />\n        <ParallelAxis\n          id="x"\n          label="personalized primary ticks"\n          primaryTickLength={7}\n          primaryTickStyle={{ stroke: \'red\' }}\n        />\n        {/** hidden axis */}\n        <Axis min={0} max={1} position="left" hidden />\n      </Plot>\n      <Plot width={300} height={100}>\n        <Axis id="x" max={20} min={0} position="bottom" label="Base Axis" />\n        <ParallelAxis\n          id="x"\n          label="hidden primary ticks"\n          primaryTickLength={0}\n        />\n        {/** hidden axis */}\n        <Axis min={0} max={1} position="left" hidden />\n      </Plot>\n    </div>\n  );\n}\n',T=function(){return a.createElement("div",{style:{display:"flex",gap:"80px",justifyContent:"center"}},a.createElement(r.XN,{width:300,height:100},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",label:"personalized primary ticks",primaryTickLength:7,primaryTickStyle:{stroke:"red"}}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0})),a.createElement(r.XN,{width:300,height:100},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",label:"hidden primary ticks",primaryTickLength:0}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0})))};function w(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(T,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"series",source:S,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(o.Z,{className:"language-jsx"},S))}const R='import React from \'react\';\nimport { Plot, Axis, ParallelAxis } from \'react-plot\';\n\nexport default function Series() {\n  return (\n    <div\n      style={{\n        display: \'flex\',\n        gap: \'80px\',\n        justifyContent: \'center\',\n      }}\n    >\n      <Plot width={300} height={100}>\n        <Axis id="x" max={20} min={0} position="bottom" label="Base Axis" />\n        <ParallelAxis\n          id="x"\n          label="personalized secondary ticks"\n          secondaryTickLength={7}\n          secondaryTickStyle={{ stroke: \'red\' }}\n        />\n        {/** hidden axis */}\n        <Axis min={0} max={1} position="left" hidden />\n      </Plot>\n      <Plot width={300} height={100}>\n        <Axis id="x" max={20} min={0} position="bottom" label="Base Axis" />\n        <ParallelAxis\n          id="x"\n          label="hidden secondary ticks"\n          secondaryTickLength={0}\n        />\n        {/** hidden axis */}\n        <Axis min={0} max={1} position="left" hidden />\n      </Plot>\n    </div>\n  );\n}\n',D=function(){return a.createElement("div",{style:{display:"flex",gap:"80px",justifyContent:"center"}},a.createElement(r.XN,{width:300,height:100},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",label:"personalized secondary ticks",secondaryTickLength:7,secondaryTickStyle:{stroke:"red"}}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0})),a.createElement(r.XN,{width:300,height:100},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Base Axis"}),a.createElement(r.u$,{id:"x",label:"hidden secondary ticks",secondaryTickLength:0}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0})))};function L(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(D,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"series",source:R,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(o.Z,{className:"language-jsx"},R))}const B='import React from \'react\';\nimport { Plot, Axis, ParallelAxis } from \'react-plot\';\n\nexport default function Series() {\n  function celsiusToFahrenheit(x: number) {\n    return (x * 9) / 5 + 32;\n  }\n  return (\n    <Plot width={300} height={100}>\n      <Axis id="x" max={20} min={0} position="bottom" label="Celsius" />\n      <ParallelAxis\n        id="x"\n        label="Fahrenheit"\n        tickLabelStyle={{ fill: \'blue\' }}\n        tickLabelFormat={(x: number) => `${celsiusToFahrenheit(x)}`}\n      />\n      {/** hidden axis */}\n      <Axis min={0} max={1} position="left" hidden />\n    </Plot>\n  );\n}\n',Z=function(){return a.createElement(r.XN,{width:300,height:100},a.createElement(r.RD,{id:"x",max:20,min:0,position:"bottom",label:"Celsius"}),a.createElement(r.u$,{id:"x",label:"Fahrenheit",tickLabelStyle:{fill:"blue"},tickLabelFormat:e=>`${function(e){return 9*e/5+32}(e)}`}),a.createElement(r.RD,{min:0,max:1,position:"left",hidden:!0}))};function F(e){const[t,n]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(Z,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:()=>n((e=>!e)),type:"button",style:{backgroundColor:t?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(s.Z,{name:"series",source:B,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>a.createElement("button",{type:"submit"},"Open sandbox"))))),t&&a.createElement(o.Z,{className:"language-jsx"},B))}const j={},X="ParallelAxis",$={unversionedId:"axes/parallelAxis",id:"axes/parallelAxis",title:"ParallelAxis",description:"ParallelAxis is a component used to create a parallel axis to an existed Axis, we must fix base axis id",source:"@site/docs/200_axes/200_parallelAxis.md",sourceDirName:"200_axes",slug:"/axes/parallelAxis",permalink:"/axes/parallelAxis",draft:!1,editUrl:"https://github.com/zakodium-oss/react-plot-docs/tree/main/docs/200_axes/200_parallelAxis.md",tags:[],version:"current",sidebarPosition:200,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Axis",permalink:"/axes/axis"},next:{title:"Introduction",permalink:"/annotations/intro"}},O={},_=[{value:"Props",id:"props",level:2},{value:"1. Identify Axis",id:"1-identify-axis",level:3},{value:"2. Choose Axis Behaviour",id:"2-choose-axis-behaviour",level:3},{value:"3. Personlise Axis",id:"3-personlise-axis",level:3},{value:"a. Line",id:"a-line",level:4},{value:"b. Label",id:"b-label",level:4},{value:"c. Ticks",id:"c-ticks",level:4},{value:"d. Ticks labels",id:"d-ticks-labels",level:4}],z={toc:_};function H(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,l.Z)({},z,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"parallelaxis"},"ParallelAxis"),(0,i.kt)("p",null,"ParallelAxis is a component used to create a parallel axis to an existed ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/axes/axis"},"Axis")),", we must fix base axis id"),(0,i.kt)(c,{mdxType:"AxisDemo"}),(0,i.kt)("h2",{id:"props"},"Props"),(0,i.kt)("h3",{id:"1-identify-axis"},"1. Identify Axis"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id:")," mandatory prop that specifies the base axis",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),(0,i.kt)("br",null))),(0,i.kt)("h3",{id:"2-choose-axis-behaviour"},"2. Choose Axis Behaviour"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"hidden:")," Hides all axis elements",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)(u,{mdxType:"AxisHidden"}))),(0,i.kt)("h3",{id:"3-personlise-axis"},"3. Personlise Axis"),(0,i.kt)("h4",{id:"a-line"},"a. Line"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"hiddenLine:")," Hides axis line",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"lineStyle:")," changes line style",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"CSSProperties"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")),(0,i.kt)(h,{mdxType:"AxisLine"}))),(0,i.kt)("h4",{id:"b-label"},"b. Label"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"label:")," labels Axis",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactNode"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},'""'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"labelStyle:")," changes label style",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"CSSProperties"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")),(0,i.kt)(E,{mdxType:"AxisLabel"}))),(0,i.kt)("h4",{id:"c-ticks"},"c. Ticks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"hiddenTicks:")," Hides axis ticks",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)(N,{mdxType:"AxisTicksHidden"})),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"tickPosition:")," changes ticks position",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"'inner' | 'outer' | 'center'"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"'center'")),(0,i.kt)(v,{mdxType:"AxisTicksPosition"})),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"primaryTickLength:")," changes primary ticks length",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"5"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"primaryTickStyle:")," customises primary ticks style",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"CSSProperties"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")),(0,i.kt)(w,{mdxType:"AxisTicksPrimary"})),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"secondaryTickLength:")," changes secondary ticks length",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"3"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"secondaryTickStyle:")," customises secondary ticks style",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"CSSProperties"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")),(0,i.kt)(L,{mdxType:"AxisTicksSecondary"}))),(0,i.kt)("h4",{id:"d-ticks-labels"},"d. Ticks labels"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"tickLabelFormat:")," personnalises the format of tick labels",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"(x: number)=>string"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"d3's smart tickFormat for time scale, String for others"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"tickLabelStyle:")," changes tick labels style",(0,i.kt)("br",null),"\ntype: ",(0,i.kt)("inlineCode",{parentName:"p"},"CSSProperties"),(0,i.kt)("br",null),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")),(0,i.kt)(F,{mdxType:"AxisTicksLabel"}))))}H.isMDXComponent=!0}}]);