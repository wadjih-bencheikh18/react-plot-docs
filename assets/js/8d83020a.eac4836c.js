"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[527],{9704:function(e,t,n){n.r(t),n.d(t,{assets:function(){return A},contentTitle:function(){return y},default:function(){return M},frontMatter:function(){return E},metadata:function(){return v},toc:function(){return C}});var r=n(7462),o=n(3366),a=n(7294),s=n(3905),i=n(8308),l=n(1059),m=n(5378),u=n(5111);function c(e,t={}){let{rescale:n=!1,uniqueX:r=!1,xColumn:o=0,yColumn:a=1,bestGuess:s=!1,keepInfo:l,numberColumns:c=Number.MAX_SAFE_INTEGER,maxNumberColumns:p=Number.MAX_SAFE_INTEGER,minNumberColumns:d=2}=t;if(void 0!==l)throw new Error("keepInfo has been deprecated, pelase use the new method parseXYAndKeepInfo");e=(0,m.Z)(e),p=Math.max(p,o+1,a+1),d=Math.max(o+1,a+1,d);let f=e.split(/[\r\n]+/),x=[],h=[],g=0;if(f.forEach((e=>{if(e=e.trim(),/[0-9]+/.test(e)&&/^[0-9eE,;. \t+-]+$/.test(e)){let t=e.split(/,[; \t]+|[; \t]+/);1===t.length&&(t=e.split(/[,; \t]+/)),t&&t.length>=d&&t.length<=p&&(x.push(t.map((e=>parseFloat(e.replace(",","."))))),g++)}else e&&h.push({position:g,value:e})})),s){if(x[0]&&3===x[0].length&&void 0===t.xColumn&&void 0===t.yColumn){let e=!0;for(let t=0;t<x.length-1;t++)1!==Math.abs(x[t][0]-x[t+1][0])&&(e=!1);e&&(o=1,a=2)}if(x[0]&&x[0].length>3){const e=[];for(let t of x)for(let n=o;n<t.length;n+=2)e.push(t[n]);(0,i.GZ)(e)&&(c=2)}}if(c){const e=[];for(const t of x)for(let n=0;n<t.length;n+=c)e.push(t.slice(n,n+c));x=e}const b={x:x.map((e=>e[o])),y:x.map((e=>e[a]))};if(r&&function(e={}){const{x:t,y:n}=e;if(t.length<2)return;if(t.length!==n.length)throw new Error("The X and Y arrays mush have the same length");let r=t[0],o=0;for(let a=1;a<t.length;a++)r!==t[a]&&(o++,r=t[a],t[o]=t[a],a!==o&&(n[o]=0)),a!==o&&(n[o]+=n[a]);t.length=o+1,n.length=o+1}(b),n){let e=(0,u.Z)(b.y);for(let t=0;t<b.y.length;t++)b.y[t]/=e}return{info:h,data:b}}var p=n(1736),d=n(1119);function f(){var e=(0,a.useState)([]),t=e[0],n=e[1],r=(0,l.AO)({direction:"horizontal"});return(0,a.useEffect)((function(){fetch("/data/mass-peg1500.txt").then((function(e){e.text().then((function(e){n((0,i.G0)(function(e,t={}){return c(e,t).data}(e)))}))}))}),[]),a.createElement("div",null,a.createElement(l.XN,{width:800,height:300},a.createElement(l.eh,{data:t,xAxis:"x",yAxis:"y"}),a.createElement(l.RD,{id:"x",position:"bottom",label:"m/z",displayPrimaryGridLines:!0}),a.createElement(l.RD,{position:"left",label:"Relative intensity",paddingStart:.03}),a.createElement(l.uN,null,r.annotations)))}var x="import React from 'react';\nimport { xyToXYObject } from 'ml-spectra-processing';\nimport { useEffect, useState } from 'react';\nimport {\n  Annotations,\n  Axis,\n  LineSeries,\n  Plot,\n  PlotController,\n  SeriesPoint,\n  useAxisZoom,\n} from 'react-plot';\nimport { parseXY } from 'xy-parser';\n\nfunction ZoomablePlot() {\n  const [data, setData] = useState<SeriesPoint[]>([]);\n  const zoom = useAxisZoom({ direction: 'horizontal' });\n\n  useEffect(() => {\n    fetch('/data/mass-peg1500.txt').then((response) => {\n      response.text().then((text) => {\n        setData(xyToXYObject(parseXY(text)));\n      });\n    });\n  }, []);\n\n  return (\n    <div>\n      <Plot width={800} height={300}>\n        <LineSeries data={data} xAxis=\"x\" yAxis=\"y\" />\n        <Axis id=\"x\" position=\"bottom\" label=\"m/z\" displayPrimaryGridLines />\n        <Axis position=\"left\" label=\"Relative intensity\" paddingStart={0.03} />\n        <Annotations>{zoom.annotations}</Annotations>\n      </Plot>\n    </div>\n  );\n}\n\nexport default function MassPlot() {\n  return (\n    <PlotController>\n      <ZoomablePlot />\n    </PlotController>\n  );\n}\n",h=function(){return a.createElement(l.aE,null,a.createElement(f,null))};function g(e){var t=(0,a.useState)(!1),n=t[0],r=t[1];return a.createElement(a.Fragment,null,a.createElement("div",{className:"demo-example-wrapper"},a.createElement(h,null),a.createElement("div",{className:"demo-example-buttons"},a.createElement("button",{onClick:function(){return r((function(e){return!e}))},type:"button",style:{backgroundColor:n?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:a.createElement(d.Z,{name:"mass-plot",source:x,dependencies:{react:"^17.0.2","ml-spectra-processing":"^11.0.0","react-plot":"^0.16.0","xy-parser":"^5.0.2"}},(function(){return a.createElement("button",{type:"submit"},"Open sandbox")})))),n&&a.createElement(p.Z,{className:"language-jsx"},x))}var b=["components"],E={},y="Mass spectrum",v={unversionedId:"experimental/mass",id:"experimental/mass",title:"Mass spectrum",description:"Example of code loading and converting a text file (using xy-parser)",source:"@site/docs/500_experimental/mass.md",sourceDirName:"500_experimental",slug:"/experimental/mass",permalink:"/experimental/mass",editUrl:"https://github.com/zakodium/react-plot-docs/tree/main/docs/500_experimental/mass.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Infrared spectrum",permalink:"/experimental/ir"},next:{title:"NMR spectra",permalink:"/experimental/nmr"}},A={},C=[],k={toc:C};function M(e){var t=e.components,n=(0,o.Z)(e,b);return(0,s.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"mass-spectrum"},"Mass spectrum"),(0,s.kt)("p",null,"Example of code loading and converting a text file (using ",(0,s.kt)("inlineCode",{parentName:"p"},"xy-parser"),")"),(0,s.kt)(g,{mdxType:"MassDemo"}))}M.isMDXComponent=!0}}]);