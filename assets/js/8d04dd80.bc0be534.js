"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[3837],{38:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>v,contentTitle:()=>S,default:()=>C,frontMatter:()=>f,metadata:()=>N,toc:()=>T});var a=t(7462),o=t(7294),i=t(3905),l=t(8154),r=t(814),s=t(1119);function c(){const e=(0,l.AO)();return o.createElement(l.XN,{width:600,height:80},o.createElement(l.uN,null,e.annotations,o.createElement(l.q6.Shape,{size:5,shape:"circle",x:2,y:0,color:"red"}),o.createElement(l.q6.Text,{x:2,y:0},"2"),o.createElement(l.q6.Shape,{size:5,shape:"circle",x:6,y:0,color:"red"}),o.createElement(l.q6.Text,{x:6,y:0},"6"),o.createElement(l.q6.Shape,{size:5,shape:"circle",x:16,y:0,color:"red"}),o.createElement(l.q6.Text,{x:16,y:0},"16")),o.createElement(l.RD,{min:0,max:20,position:"bottom",label:"Number ScalarValue"}),o.createElement(l.RD,{min:-2,max:1,position:"left",hidden:!0}))}const m='import React from \'react\';\nimport {\n  Annotation,\n  Annotations,\n  Axis,\n  LineSeries,\n  Plot,\n  PlotController,\n  ScatterSeries,\n  useAxisZoom,\n} from \'react-plot\';\n\nfunction Series() {\n  const zoom = useAxisZoom();\n  return (\n    <Plot width={600} height={80}>\n      <Annotations>\n        {zoom.annotations}\n        <Annotation.Shape size={5} shape="circle" x={2} y={0} color="red" />\n        <Annotation.Text x={2} y={0}>\n          2\n        </Annotation.Text>\n        <Annotation.Shape size={5} shape="circle" x={6} y={0} color="red" />\n        <Annotation.Text x={6} y={0}>\n          6\n        </Annotation.Text>\n        <Annotation.Shape size={5} shape="circle" x={16} y={0} color="red" />\n        <Annotation.Text x={16} y={0}>\n          16\n        </Annotation.Text>\n      </Annotations>\n      <Axis min={0} max={20} position="bottom" label="Number ScalarValue" />\n      {/** hidden axis */}\n      <Axis min={-2} max={1} position="left" hidden />\n    </Plot>\n  );\n}\nexport default function withZoom() {\n  return (\n    <PlotController>\n      <Series />\n    </PlotController>\n  );\n}\n',p=function(){return o.createElement(l.aE,null,o.createElement(c,null))};function u(e){const[n,t]=(0,o.useState)(!1);return o.createElement(o.Fragment,null,o.createElement("div",{className:"demo-example-wrapper"},o.createElement(p,null),o.createElement("div",{className:"demo-example-buttons"},o.createElement("button",{onClick:()=>t((e=>!e)),type:"button",style:{backgroundColor:n?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:o.createElement(s.Z,{name:"with-zoom",source:m,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>o.createElement("button",{type:"submit"},"Open sandbox"))))),n&&o.createElement(r.Z,{className:"language-jsx"},m))}function d(){const e=(0,l.AO)();return o.createElement(l.XN,{width:600,height:80},o.createElement(l.uN,null,e.annotations,o.createElement(l.q6.Shape,{size:5,shape:"circle",x:"100",y:0,color:"red"}),o.createElement(l.q6.Text,{x:"100",y:0},"100px"),o.createElement(l.q6.Shape,{size:5,shape:"circle",x:"200",y:0,color:"red"}),o.createElement(l.q6.Text,{x:"200",y:0},"200px"),o.createElement(l.q6.Shape,{size:5,shape:"circle",x:"400",y:0,color:"red"}),o.createElement(l.q6.Text,{x:"400",y:0},"400px")),o.createElement(l.RD,{min:0,max:20,position:"bottom",label:"Number ScalarValue"}),o.createElement(l.RD,{min:-2,max:1,position:"left",hidden:!0}))}const x='import React from \'react\';\nimport {\n  Annotation,\n  Annotations,\n  Axis,\n  LineSeries,\n  Plot,\n  PlotController,\n  ScatterSeries,\n  useAxisZoom,\n} from \'react-plot\';\n\nfunction Series() {\n  const zoom = useAxisZoom();\n  return (\n    <Plot width={600} height={80}>\n      <Annotations>\n        {zoom.annotations}\n        <Annotation.Shape size={5} shape="circle" x="100" y={0} color="red" />\n        <Annotation.Text x="100" y={0}>\n          100px\n        </Annotation.Text>\n        <Annotation.Shape size={5} shape="circle" x="200" y={0} color="red" />\n        <Annotation.Text x="200" y={0}>\n          200px\n        </Annotation.Text>\n        <Annotation.Shape size={5} shape="circle" x="400" y={0} color="red" />\n        <Annotation.Text x="400" y={0}>\n          400px\n        </Annotation.Text>\n      </Annotations>\n      <Axis min={0} max={20} position="bottom" label="Number ScalarValue" />\n      {/** hidden axis */}\n      <Axis min={-2} max={1} position="left" hidden />\n    </Plot>\n  );\n}\n\nexport default function withZoom() {\n  return (\n    <PlotController>\n      <Series />\n    </PlotController>\n  );\n}\n',h=function(){return o.createElement(l.aE,null,o.createElement(d,null))};function E(e){const[n,t]=(0,o.useState)(!1);return o.createElement(o.Fragment,null,o.createElement("div",{className:"demo-example-wrapper"},o.createElement(h,null),o.createElement("div",{className:"demo-example-buttons"},o.createElement("button",{onClick:()=>t((e=>!e)),type:"button",style:{backgroundColor:n?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:o.createElement(s.Z,{name:"with-zoom",source:x,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>o.createElement("button",{type:"submit"},"Open sandbox"))))),n&&o.createElement(r.Z,{className:"language-jsx"},x))}function y(){const e=(0,l.AO)();return o.createElement(l.XN,{width:600,height:80},o.createElement(l.uN,null,e.annotations,o.createElement(l.q6.Shape,{size:5,shape:"circle",x:"10%",y:0,color:"red"}),o.createElement(l.q6.Text,{x:"10%",y:0},"10%"),o.createElement(l.q6.Shape,{size:5,shape:"circle",x:"20%",y:0,color:"red"}),o.createElement(l.q6.Text,{x:"200",y:0},"20%"),o.createElement(l.q6.Shape,{size:5,shape:"circle",x:"50%",y:0,color:"red"}),o.createElement(l.q6.Text,{x:"50%",y:0},"50%")),o.createElement(l.RD,{min:0,max:20,position:"bottom",label:"Number ScalarValue"}),o.createElement(l.RD,{min:-2,max:1,position:"left",hidden:!0}))}const b='import React from \'react\';\nimport {\n  Annotation,\n  Annotations,\n  Axis,\n  LineSeries,\n  Plot,\n  PlotController,\n  ScatterSeries,\n  useAxisZoom,\n} from \'react-plot\';\n\nfunction Series() {\n  const zoom = useAxisZoom();\n  return (\n    <Plot width={600} height={80}>\n      <Annotations>\n        {zoom.annotations}\n        <Annotation.Shape size={5} shape="circle" x="10%" y={0} color="red" />\n        <Annotation.Text x="10%" y={0}>\n          10%\n        </Annotation.Text>\n        <Annotation.Shape size={5} shape="circle" x="20%" y={0} color="red" />\n        <Annotation.Text x="200" y={0}>\n          20%\n        </Annotation.Text>\n        <Annotation.Shape size={5} shape="circle" x="50%" y={0} color="red" />\n        <Annotation.Text x="50%" y={0}>\n          50%\n        </Annotation.Text>\n      </Annotations>\n      <Axis min={0} max={20} position="bottom" label="Number ScalarValue" />\n      {/** hidden axis */}\n      <Axis min={-2} max={1} position="left" hidden />\n    </Plot>\n  );\n}\n\nexport default function withZoom() {\n  return (\n    <PlotController>\n      <Series />\n    </PlotController>\n  );\n}\n',k=function(){return o.createElement(l.aE,null,o.createElement(y,null))};function A(e){const[n,t]=(0,o.useState)(!1);return o.createElement(o.Fragment,null,o.createElement("div",{className:"demo-example-wrapper"},o.createElement(k,null),o.createElement("div",{className:"demo-example-buttons"},o.createElement("button",{onClick:()=>t((e=>!e)),type:"button",style:{backgroundColor:n?"#dbeafe":void 0}},"Code"),e.noCodesandbox?null:o.createElement(s.Z,{name:"with-zoom",source:b,dependencies:{react:"^18.2.0","react-plot":"^0.20.4"}},(()=>o.createElement("button",{type:"submit"},"Open sandbox"))))),n&&o.createElement(r.Z,{className:"language-jsx"},b))}const f={},S="ScalarValue",N={unversionedId:"types/scalarValue",id:"types/scalarValue",title:"ScalarValue",description:"This type is mainly used to allow more possibilities and ways to enter props",source:"@site/docs/500_types/scalarValue.md",sourceDirName:"500_types",slug:"/types/scalarValue",permalink:"/types/scalarValue",draft:!1,editUrl:"https://github.com/zakodium-oss/react-plot-docs/tree/main/docs/500_types/scalarValue.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data",permalink:"/types/data"},next:{title:"Infrared spectrum",permalink:"/experimental/ir"}},v={},T=[{value:"1. Number",id:"1-number",level:2},{value:"Definition",id:"definition",level:3},{value:"Utilities",id:"utilities",level:3},{value:"Example",id:"example",level:3},{value:"2. Pixels",id:"2-pixels",level:2},{value:"Definition",id:"definition-1",level:3},{value:"Utilities",id:"utilities-1",level:3},{value:"Example",id:"example-1",level:3},{value:"3. Percentage",id:"3-percentage",level:2},{value:"Definition",id:"definition-2",level:3},{value:"Utilities",id:"utilities-2",level:3},{value:"Examples",id:"examples",level:3}],g={toc:T};function C(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"scalarvalue"},"ScalarValue"),(0,i.kt)("p",null,"This type is mainly used to allow more possibilities and ways to enter props"),(0,i.kt)("p",null,"We currently allow following three types :"),(0,i.kt)("h2",{id:"1-number"},"1. Number"),(0,i.kt)("h3",{id:"definition"},"Definition"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In Typescript:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),",",(0,i.kt)("inlineCode",{parentName:"p"},"5")),(0,i.kt)("h3",{id:"utilities"},"Utilities"),(0,i.kt)("p",null,"The value is converted using ",(0,i.kt)("a",{parentName:"p",href:"/axes/intro"},"Axis")," scale"),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)(u,{mdxType:"ScalarValueNumber"}),(0,i.kt)("h2",{id:"2-pixels"},"2. Pixels"),(0,i.kt)("h3",{id:"definition-1"},"Definition"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In Typescript:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"'${number}'"),(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Explanation:")," String number",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"'3'"),",",(0,i.kt)("inlineCode",{parentName:"p"},"'5'")),(0,i.kt)("h3",{id:"utilities-1"},"Utilities"),(0,i.kt)("p",null,"The value is in pixels, independent from scale and ",(0,i.kt)("a",{parentName:"p",href:"/axes/intro"},"Axis")),(0,i.kt)("h3",{id:"example-1"},"Example"),(0,i.kt)(E,{mdxType:"ScalarValuePixels"}),(0,i.kt)("h2",{id:"3-percentage"},"3. Percentage"),(0,i.kt)("h3",{id:"definition-2"},"Definition"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In Typescript:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"'${number}%'"),(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Explanation:")," String number ends with ",(0,i.kt)("inlineCode",{parentName:"p"},'"%"'),(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"'3%'"),",",(0,i.kt)("inlineCode",{parentName:"p"},"'5%'")),(0,i.kt)("h3",{id:"utilities-2"},"Utilities"),(0,i.kt)("p",null,"The value is converted depending on ",(0,i.kt)("a",{parentName:"p",href:"/axes/intro"},"Axis")," domain"),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)(A,{mdxType:"ScalarValuePourcentage"}))}C.isMDXComponent=!0}}]);